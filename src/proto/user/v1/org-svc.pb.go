// Code generated by protoc-gen-go. DO NOT EDIT.
// source: org-svc.proto

package pb_user_v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("org-svc.proto", fileDescriptor_79fd6655a38769cc) }

var fileDescriptor_79fd6655a38769cc = []byte{
	// 724 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdf, 0x6f, 0xd3, 0x30,
	0x10, 0x16, 0x2f, 0x3c, 0x78, 0x6c, 0x50, 0xaf, 0x8c, 0x2d, 0xb0, 0x89, 0x49, 0x08, 0x89, 0x87,
	0x4d, 0xda, 0x78, 0x40, 0x02, 0x26, 0xb1, 0x36, 0xac, 0x44, 0x6c, 0x23, 0x73, 0x99, 0xf6, 0x38,
	0xa5, 0xf1, 0xa9, 0x8b, 0xd4, 0xc6, 0xc6, 0x4e, 0x26, 0xfa, 0x2f, 0xec, 0xaf, 0x46, 0xb6, 0xf3,
	0xc3, 0x69, 0xd2, 0x5f, 0x13, 0x6f, 0xed, 0xf9, 0xee, 0xbb, 0xef, 0xee, 0xbe, 0x9c, 0x8d, 0xd6,
	0x99, 0x18, 0x1e, 0xc8, 0xfb, 0xf0, 0x90, 0x0b, 0x96, 0x30, 0x8c, 0xf8, 0xe0, 0x36, 0x95, 0x20,
	0x6e, 0xef, 0x8f, 0x9c, 0x36, 0x07, 0x31, 0x8e, 0xa4, 0x8c, 0x58, 0x7c, 0x30, 0x96, 0x43, 0xe3,
	0xe1, 0x6c, 0xa8, 0x63, 0xfb, 0xbf, 0x60, 0x23, 0xb0, 0xfe, 0xa3, 0x41, 0x20, 0x21, 0xfb, 0xfd,
	0x7c, 0x28, 0x58, 0xca, 0xcb, 0xc3, 0xe3, 0x87, 0x36, 0x5a, 0x27, 0x3c, 0xfc, 0x25, 0x86, 0x7d,
	0x10, 0xf7, 0x51, 0x08, 0xf8, 0x04, 0x21, 0xc2, 0xc3, 0x53, 0x4a, 0xaf, 0x25, 0x08, 0xfc, 0xf2,
	0xb0, 0xcc, 0x7f, 0xa8, 0x2c, 0xbe, 0xc6, 0xd9, 0xb6, 0xcd, 0x97, 0xe9, 0x68, 0x44, 0x40, 0x72,
	0x16, 0x4b, 0xc0, 0x2e, 0x6a, 0x11, 0x1e, 0x5e, 0x73, 0x1a, 0x24, 0xa0, 0xfc, 0x3b, 0x13, 0xcf,
	0x5d, 0x1d, 0xe5, 0x33, 0xda, 0x20, 0x3c, 0xec, 0x41, 0x92, 0x41, 0x50, 0xdc, 0xb2, 0x7d, 0xbd,
	0x98, 0xc2, 0x5f, 0xa7, 0x19, 0x15, 0x5f, 0xa0, 0x57, 0x84, 0x87, 0xde, 0x98, 0x33, 0xa1, 0xc3,
	0x65, 0x67, 0xd2, 0x53, 0x55, 0x7b, 0x14, 0x57, 0x12, 0x6a, 0xa3, 0x72, 0xf0, 0xa8, 0x9c, 0x43,
	0xe5, 0x9b, 0x2e, 0xc8, 0x85, 0x11, 0x58, 0x05, 0x35, 0xb0, 0x99, 0x8d, 0x70, 0x62, 0x17, 0x73,
	0x1e, 0xc9, 0x04, 0xb7, 0x6b, 0xcc, 0x83, 0x21, 0xd4, 0xeb, 0x91, 0xca, 0x8c, 0xcf, 0xd1, 0x5a,
	0x19, 0x2e, 0xf1, 0xde, 0xb4, 0xd7, 0x55, 0x0a, 0x62, 0xd2, 0x65, 0x31, 0x8d, 0x92, 0x88, 0xc5,
	0xce, 0x6e, 0xe3, 0xb9, 0x35, 0x9f, 0x4d, 0xc2, 0xc3, 0x4e, 0x90, 0x84, 0x77, 0x65, 0x4d, 0x12,
	0x6f, 0x4e, 0x47, 0x79, 0xee, 0xbc, 0xa6, 0x7c, 0x47, 0x6b, 0xc4, 0xef, 0xea, 0x0e, 0x9e, 0x52,
	0x8a, 0x5f, 0xd7, 0xfa, 0x7a, 0x4a, 0x29, 0x81, 0x3f, 0x29, 0xc8, 0xc4, 0xd9, 0xa9, 0x1d, 0x16,
	0x30, 0x0f, 0x4f, 0xd0, 0x7e, 0x8e, 0xa3, 0x69, 0xde, 0x44, 0xc9, 0xdd, 0x55, 0xca, 0x92, 0xa0,
	0x53, 0x56, 0x84, 0x8f, 0x6a, 0x00, 0x33, 0x7d, 0xf3, 0x9c, 0xc7, 0xab, 0x84, 0x64, 0x64, 0x7e,
	0xa2, 0x8d, 0x9c, 0x8b, 0x91, 0x6f, 0xb5, 0xd5, 0xd6, 0xc1, 0x12, 0x95, 0xf5, 0x50, 0x2b, 0x07,
	0xfb, 0x2d, 0x00, 0x74, 0xf6, 0x6a, 0x93, 0x8d, 0x26, 0xdd, 0xea, 0xbc, 0x8a, 0x00, 0x4b, 0x7e,
	0x05, 0x2b, 0x33, 0xaf, 0x66, 0x94, 0x39, 0x54, 0x7e, 0xa0, 0x3d, 0xe2, 0x77, 0x35, 0x03, 0x33,
	0x9a, 0x98, 0xf6, 0xd3, 0x81, 0xfe, 0x29, 0x1b, 0x86, 0x9f, 0x23, 0xb6, 0x6a, 0x6a, 0xc4, 0x04,
	0xed, 0x56, 0x90, 0x3c, 0xd7, 0xc6, 0xf2, 0xdc, 0x66, 0xa0, 0x37, 0x0d, 0x46, 0x59, 0xb0, 0xbb,
	0x41, 0x6d, 0xe2, 0x77, 0xfb, 0x90, 0x64, 0x53, 0x62, 0x49, 0x70, 0x2d, 0x81, 0xe2, 0x77, 0x76,
	0x54, 0xed, 0x78, 0x89, 0x09, 0xdc, 0xa1, 0xed, 0x9c, 0x6c, 0x4d, 0x51, 0xfb, 0x76, 0x58, 0xa3,
	0x8b, 0xf3, 0x61, 0xa1, 0x8b, 0x35, 0xa2, 0xad, 0x3c, 0xd3, 0x23, 0x1b, 0x7b, 0x99, 0xef, 0x5c,
	0xc2, 0x46, 0x80, 0xdf, 0xdb, 0x0e, 0x5d, 0x01, 0x41, 0x02, 0x17, 0x10, 0xa7, 0x3e, 0x88, 0x71,
	0x56, 0xf7, 0xa2, 0xf5, 0x79, 0xa5, 0x97, 0x7a, 0x26, 0xd6, 0xff, 0x03, 0xf9, 0x55, 0x43, 0x1a,
	0x09, 0x6a, 0xc8, 0x95, 0x56, 0xa0, 0x87, 0x9e, 0x11, 0x1e, 0x9a, 0x4d, 0x34, 0x23, 0x78, 0x49,
	0x8a, 0xb8, 0xaf, 0x89, 0x14, 0x50, 0x12, 0xbf, 0xb5, 0x03, 0x95, 0x49, 0x6d, 0xcd, 0x4a, 0x55,
	0x0b, 0x3d, 0xf0, 0x17, 0xbd, 0x63, 0x55, 0x3e, 0xf5, 0xf1, 0xe1, 0x2d, 0x3b, 0x40, 0x59, 0x2f,
	0x18, 0x4d, 0x47, 0xe0, 0x54, 0xf6, 0x76, 0x37, 0x90, 0x61, 0x40, 0x41, 0x66, 0x8b, 0xc3, 0x68,
	0xb3, 0x61, 0x71, 0x58, 0x07, 0x4b, 0xc8, 0xd6, 0x43, 0x2f, 0x8c, 0x14, 0xfc, 0xe2, 0xae, 0xaf,
	0xae, 0xd7, 0xd2, 0xbe, 0x68, 0x64, 0x67, 0xa8, 0x6d, 0x2e, 0x8e, 0x32, 0x64, 0xd6, 0xe5, 0x35,
	0x2f, 0x03, 0xf6, 0xf5, 0x85, 0x6a, 0x2a, 0x98, 0x82, 0x7a, 0x24, 0xb3, 0xe2, 0x8d, 0xa1, 0x7a,
	0x5b, 0x7d, 0x1d, 0xe8, 0x99, 0xaf, 0xf0, 0xc6, 0x50, 0xfe, 0xf5, 0x37, 0xc6, 0x32, 0x28, 0x67,
	0xba, 0x2c, 0xa3, 0xe8, 0xc5, 0x1d, 0x9a, 0xa7, 0xed, 0x1d, 0xd3, 0x66, 0x95, 0x34, 0x13, 0x45,
	0x67, 0x62, 0x14, 0xb3, 0xa2, 0x92, 0x5c, 0x2d, 0xc3, 0xec, 0xed, 0x25, 0xab, 0xdd, 0xcd, 0xad,
	0xb9, 0x86, 0x66, 0x13, 0xfa, 0xa4, 0x3f, 0xb6, 0x5e, 0xb6, 0x33, 0x67, 0x6c, 0x21, 0x5c, 0x33,
	0xca, 0xc1, 0x53, 0xfd, 0x26, 0xfc, 0xf8, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x79, 0xc1, 0xd2, 0x1b,
	0x83, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RpcOrgServiceClient is the client API for RpcOrgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RpcOrgServiceClient interface {
	RpcAddUser(ctx context.Context, in *UserProto, opts ...grpc.CallOption) (*NullResponse, error)
	RpcUpdateUserByID(ctx context.Context, in *UserProto, opts ...grpc.CallOption) (*NullResponse, error)
	RpcGetUserById(ctx context.Context, in *Index, opts ...grpc.CallOption) (*UserProto, error)
	RpcImportUsersByGroupId(ctx context.Context, in *GroupUserIds, opts ...grpc.CallOption) (*NullResponse, error)
	RpcDeleteUserByID(ctx context.Context, in *Index, opts ...grpc.CallOption) (*NullResponse, error)
	RpcGetUserList(ctx context.Context, in *UserPage, opts ...grpc.CallOption) (*UsersPage, error)
	RpcGetUsers(ctx context.Context, in *UserQueryCondition, opts ...grpc.CallOption) (*UserQueryResponse, error)
	RpcBatchDeleteUsers(ctx context.Context, in *UserIDs, opts ...grpc.CallOption) (*NullResponse, error)
	RPCGroupAdd(ctx context.Context, in *GroupAddRequest, opts ...grpc.CallOption) (*GroupResponse, error)
	RPCGroupQueryWithQuotaByCondition(ctx context.Context, in *GroupQueryWithQuotaByConditionRequest, opts ...grpc.CallOption) (*GroupQueryWithQuotaByConditionResponse, error)
	RPCGroupUpdate(ctx context.Context, in *GroupUpdateRequest, opts ...grpc.CallOption) (*GroupResponse, error)
	RPCGroupTreeQuery(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*GroupTreeResponse, error)
	RPCGroupDelete(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*GroupResponse, error)
	RPCQueryGroupAndSubGroupsUsers(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*Users, error)
	RPCQueryGroupIDAndSubGroupsID(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*GroupIDsResponse, error)
	RPCSetGroupQuotaUsed(ctx context.Context, in *SetGroupQuotaUsedRequest, opts ...grpc.CallOption) (*GroupResponse, error)
	RPCQueryQuotaByCondition(ctx context.Context, in *QueryQuotaByCondition, opts ...grpc.CallOption) (*QueryQuotaByConditionResponse, error)
	RPCQuerySubGroupsUsers(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*Users, error)
	RpcAddRole(ctx context.Context, in *CreateMenuPermRequestProto, opts ...grpc.CallOption) (*NullResponse, error)
	RpcUpdateRole(ctx context.Context, in *CreateMenuPermRequestProto, opts ...grpc.CallOption) (*NullResponse, error)
	RpcDeleteRole(ctx context.Context, in *Index, opts ...grpc.CallOption) (*NullResponse, error)
	RpcQueryRole(ctx context.Context, in *Index, opts ...grpc.CallOption) (*CreateMenuPermRequestProto, error)
	RpcQueryRoles(ctx context.Context, in *RolePageRequestProto, opts ...grpc.CallOption) (*RolePageRequestProto, error)
	RpcMenuTree(ctx context.Context, in *MenuModule, opts ...grpc.CallOption) (*Cascades, error)
	RPCQuotaUpdate(ctx context.Context, in *QuotaUpdateRequest, opts ...grpc.CallOption) (*GroupResponse, error)
	RpcAddPermission(ctx context.Context, in *PermissionProto, opts ...grpc.CallOption) (*NullResponse, error)
	RpcGetPermissionByID(ctx context.Context, in *Index, opts ...grpc.CallOption) (*PermissionProto, error)
	RpcUpdatePermissionByID(ctx context.Context, in *PermissionProto, opts ...grpc.CallOption) (*NullResponse, error)
	RpcAddMenu(ctx context.Context, in *MenuProto, opts ...grpc.CallOption) (*NullResponse, error)
	RpcUpdateMenuByID(ctx context.Context, in *MenuProto, opts ...grpc.CallOption) (*NullResponse, error)
	RpcDeletePermissionByID(ctx context.Context, in *Index, opts ...grpc.CallOption) (*NullResponse, error)
	RpcGetMenuCascadeByModule(ctx context.Context, in *MenuModule, opts ...grpc.CallOption) (*Cascades, error)
	RpcAddUsers(ctx context.Context, in *AddUsersRequest, opts ...grpc.CallOption) (*NullResponse, error)
	RpcGetGroups(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*Groups, error)
}

type rpcOrgServiceClient struct {
	cc *grpc.ClientConn
}

func NewRpcOrgServiceClient(cc *grpc.ClientConn) RpcOrgServiceClient {
	return &rpcOrgServiceClient{cc}
}

func (c *rpcOrgServiceClient) RpcAddUser(ctx context.Context, in *UserProto, opts ...grpc.CallOption) (*NullResponse, error) {
	out := new(NullResponse)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RpcAddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RpcUpdateUserByID(ctx context.Context, in *UserProto, opts ...grpc.CallOption) (*NullResponse, error) {
	out := new(NullResponse)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RpcUpdateUserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RpcGetUserById(ctx context.Context, in *Index, opts ...grpc.CallOption) (*UserProto, error) {
	out := new(UserProto)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RpcGetUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RpcImportUsersByGroupId(ctx context.Context, in *GroupUserIds, opts ...grpc.CallOption) (*NullResponse, error) {
	out := new(NullResponse)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RpcImportUsersByGroupId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RpcDeleteUserByID(ctx context.Context, in *Index, opts ...grpc.CallOption) (*NullResponse, error) {
	out := new(NullResponse)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RpcDeleteUserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RpcGetUserList(ctx context.Context, in *UserPage, opts ...grpc.CallOption) (*UsersPage, error) {
	out := new(UsersPage)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RpcGetUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RpcGetUsers(ctx context.Context, in *UserQueryCondition, opts ...grpc.CallOption) (*UserQueryResponse, error) {
	out := new(UserQueryResponse)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RpcGetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RpcBatchDeleteUsers(ctx context.Context, in *UserIDs, opts ...grpc.CallOption) (*NullResponse, error) {
	out := new(NullResponse)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RpcBatchDeleteUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RPCGroupAdd(ctx context.Context, in *GroupAddRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	out := new(GroupResponse)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RPCGroupAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RPCGroupQueryWithQuotaByCondition(ctx context.Context, in *GroupQueryWithQuotaByConditionRequest, opts ...grpc.CallOption) (*GroupQueryWithQuotaByConditionResponse, error) {
	out := new(GroupQueryWithQuotaByConditionResponse)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RPCGroupQueryWithQuotaByCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RPCGroupUpdate(ctx context.Context, in *GroupUpdateRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	out := new(GroupResponse)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RPCGroupUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RPCGroupTreeQuery(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*GroupTreeResponse, error) {
	out := new(GroupTreeResponse)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RPCGroupTreeQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RPCGroupDelete(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*GroupResponse, error) {
	out := new(GroupResponse)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RPCGroupDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RPCQueryGroupAndSubGroupsUsers(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RPCQueryGroupAndSubGroupsUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RPCQueryGroupIDAndSubGroupsID(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*GroupIDsResponse, error) {
	out := new(GroupIDsResponse)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RPCQueryGroupIDAndSubGroupsID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RPCSetGroupQuotaUsed(ctx context.Context, in *SetGroupQuotaUsedRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	out := new(GroupResponse)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RPCSetGroupQuotaUsed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RPCQueryQuotaByCondition(ctx context.Context, in *QueryQuotaByCondition, opts ...grpc.CallOption) (*QueryQuotaByConditionResponse, error) {
	out := new(QueryQuotaByConditionResponse)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RPCQueryQuotaByCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RPCQuerySubGroupsUsers(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RPCQuerySubGroupsUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RpcAddRole(ctx context.Context, in *CreateMenuPermRequestProto, opts ...grpc.CallOption) (*NullResponse, error) {
	out := new(NullResponse)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RpcAddRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RpcUpdateRole(ctx context.Context, in *CreateMenuPermRequestProto, opts ...grpc.CallOption) (*NullResponse, error) {
	out := new(NullResponse)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RpcUpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RpcDeleteRole(ctx context.Context, in *Index, opts ...grpc.CallOption) (*NullResponse, error) {
	out := new(NullResponse)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RpcDeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RpcQueryRole(ctx context.Context, in *Index, opts ...grpc.CallOption) (*CreateMenuPermRequestProto, error) {
	out := new(CreateMenuPermRequestProto)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RpcQueryRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RpcQueryRoles(ctx context.Context, in *RolePageRequestProto, opts ...grpc.CallOption) (*RolePageRequestProto, error) {
	out := new(RolePageRequestProto)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RpcQueryRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RpcMenuTree(ctx context.Context, in *MenuModule, opts ...grpc.CallOption) (*Cascades, error) {
	out := new(Cascades)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RpcMenuTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RPCQuotaUpdate(ctx context.Context, in *QuotaUpdateRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	out := new(GroupResponse)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RPCQuotaUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RpcAddPermission(ctx context.Context, in *PermissionProto, opts ...grpc.CallOption) (*NullResponse, error) {
	out := new(NullResponse)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RpcAddPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RpcGetPermissionByID(ctx context.Context, in *Index, opts ...grpc.CallOption) (*PermissionProto, error) {
	out := new(PermissionProto)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RpcGetPermissionByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RpcUpdatePermissionByID(ctx context.Context, in *PermissionProto, opts ...grpc.CallOption) (*NullResponse, error) {
	out := new(NullResponse)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RpcUpdatePermissionByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RpcAddMenu(ctx context.Context, in *MenuProto, opts ...grpc.CallOption) (*NullResponse, error) {
	out := new(NullResponse)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RpcAddMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RpcUpdateMenuByID(ctx context.Context, in *MenuProto, opts ...grpc.CallOption) (*NullResponse, error) {
	out := new(NullResponse)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RpcUpdateMenuByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RpcDeletePermissionByID(ctx context.Context, in *Index, opts ...grpc.CallOption) (*NullResponse, error) {
	out := new(NullResponse)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RpcDeletePermissionByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RpcGetMenuCascadeByModule(ctx context.Context, in *MenuModule, opts ...grpc.CallOption) (*Cascades, error) {
	out := new(Cascades)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RpcGetMenuCascadeByModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RpcAddUsers(ctx context.Context, in *AddUsersRequest, opts ...grpc.CallOption) (*NullResponse, error) {
	out := new(NullResponse)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RpcAddUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RpcGetGroups(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*Groups, error) {
	out := new(Groups)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RpcGetGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcOrgServiceServer is the server API for RpcOrgService service.
type RpcOrgServiceServer interface {
	RpcAddUser(context.Context, *UserProto) (*NullResponse, error)
	RpcUpdateUserByID(context.Context, *UserProto) (*NullResponse, error)
	RpcGetUserById(context.Context, *Index) (*UserProto, error)
	RpcImportUsersByGroupId(context.Context, *GroupUserIds) (*NullResponse, error)
	RpcDeleteUserByID(context.Context, *Index) (*NullResponse, error)
	RpcGetUserList(context.Context, *UserPage) (*UsersPage, error)
	RpcGetUsers(context.Context, *UserQueryCondition) (*UserQueryResponse, error)
	RpcBatchDeleteUsers(context.Context, *UserIDs) (*NullResponse, error)
	RPCGroupAdd(context.Context, *GroupAddRequest) (*GroupResponse, error)
	RPCGroupQueryWithQuotaByCondition(context.Context, *GroupQueryWithQuotaByConditionRequest) (*GroupQueryWithQuotaByConditionResponse, error)
	RPCGroupUpdate(context.Context, *GroupUpdateRequest) (*GroupResponse, error)
	RPCGroupTreeQuery(context.Context, *GroupID) (*GroupTreeResponse, error)
	RPCGroupDelete(context.Context, *GroupID) (*GroupResponse, error)
	RPCQueryGroupAndSubGroupsUsers(context.Context, *GroupID) (*Users, error)
	RPCQueryGroupIDAndSubGroupsID(context.Context, *GroupID) (*GroupIDsResponse, error)
	RPCSetGroupQuotaUsed(context.Context, *SetGroupQuotaUsedRequest) (*GroupResponse, error)
	RPCQueryQuotaByCondition(context.Context, *QueryQuotaByCondition) (*QueryQuotaByConditionResponse, error)
	RPCQuerySubGroupsUsers(context.Context, *GroupID) (*Users, error)
	RpcAddRole(context.Context, *CreateMenuPermRequestProto) (*NullResponse, error)
	RpcUpdateRole(context.Context, *CreateMenuPermRequestProto) (*NullResponse, error)
	RpcDeleteRole(context.Context, *Index) (*NullResponse, error)
	RpcQueryRole(context.Context, *Index) (*CreateMenuPermRequestProto, error)
	RpcQueryRoles(context.Context, *RolePageRequestProto) (*RolePageRequestProto, error)
	RpcMenuTree(context.Context, *MenuModule) (*Cascades, error)
	RPCQuotaUpdate(context.Context, *QuotaUpdateRequest) (*GroupResponse, error)
	RpcAddPermission(context.Context, *PermissionProto) (*NullResponse, error)
	RpcGetPermissionByID(context.Context, *Index) (*PermissionProto, error)
	RpcUpdatePermissionByID(context.Context, *PermissionProto) (*NullResponse, error)
	RpcAddMenu(context.Context, *MenuProto) (*NullResponse, error)
	RpcUpdateMenuByID(context.Context, *MenuProto) (*NullResponse, error)
	RpcDeletePermissionByID(context.Context, *Index) (*NullResponse, error)
	RpcGetMenuCascadeByModule(context.Context, *MenuModule) (*Cascades, error)
	RpcAddUsers(context.Context, *AddUsersRequest) (*NullResponse, error)
	RpcGetGroups(context.Context, *GroupID) (*Groups, error)
}

// UnimplementedRpcOrgServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRpcOrgServiceServer struct {
}

func (*UnimplementedRpcOrgServiceServer) RpcAddUser(ctx context.Context, req *UserProto) (*NullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcAddUser not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RpcUpdateUserByID(ctx context.Context, req *UserProto) (*NullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcUpdateUserByID not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RpcGetUserById(ctx context.Context, req *Index) (*UserProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcGetUserById not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RpcImportUsersByGroupId(ctx context.Context, req *GroupUserIds) (*NullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcImportUsersByGroupId not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RpcDeleteUserByID(ctx context.Context, req *Index) (*NullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcDeleteUserByID not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RpcGetUserList(ctx context.Context, req *UserPage) (*UsersPage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcGetUserList not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RpcGetUsers(ctx context.Context, req *UserQueryCondition) (*UserQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcGetUsers not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RpcBatchDeleteUsers(ctx context.Context, req *UserIDs) (*NullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcBatchDeleteUsers not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RPCGroupAdd(ctx context.Context, req *GroupAddRequest) (*GroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCGroupAdd not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RPCGroupQueryWithQuotaByCondition(ctx context.Context, req *GroupQueryWithQuotaByConditionRequest) (*GroupQueryWithQuotaByConditionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCGroupQueryWithQuotaByCondition not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RPCGroupUpdate(ctx context.Context, req *GroupUpdateRequest) (*GroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCGroupUpdate not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RPCGroupTreeQuery(ctx context.Context, req *GroupID) (*GroupTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCGroupTreeQuery not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RPCGroupDelete(ctx context.Context, req *GroupID) (*GroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCGroupDelete not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RPCQueryGroupAndSubGroupsUsers(ctx context.Context, req *GroupID) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCQueryGroupAndSubGroupsUsers not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RPCQueryGroupIDAndSubGroupsID(ctx context.Context, req *GroupID) (*GroupIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCQueryGroupIDAndSubGroupsID not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RPCSetGroupQuotaUsed(ctx context.Context, req *SetGroupQuotaUsedRequest) (*GroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCSetGroupQuotaUsed not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RPCQueryQuotaByCondition(ctx context.Context, req *QueryQuotaByCondition) (*QueryQuotaByConditionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCQueryQuotaByCondition not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RPCQuerySubGroupsUsers(ctx context.Context, req *GroupID) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCQuerySubGroupsUsers not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RpcAddRole(ctx context.Context, req *CreateMenuPermRequestProto) (*NullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcAddRole not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RpcUpdateRole(ctx context.Context, req *CreateMenuPermRequestProto) (*NullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcUpdateRole not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RpcDeleteRole(ctx context.Context, req *Index) (*NullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcDeleteRole not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RpcQueryRole(ctx context.Context, req *Index) (*CreateMenuPermRequestProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcQueryRole not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RpcQueryRoles(ctx context.Context, req *RolePageRequestProto) (*RolePageRequestProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcQueryRoles not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RpcMenuTree(ctx context.Context, req *MenuModule) (*Cascades, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcMenuTree not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RPCQuotaUpdate(ctx context.Context, req *QuotaUpdateRequest) (*GroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCQuotaUpdate not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RpcAddPermission(ctx context.Context, req *PermissionProto) (*NullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcAddPermission not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RpcGetPermissionByID(ctx context.Context, req *Index) (*PermissionProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcGetPermissionByID not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RpcUpdatePermissionByID(ctx context.Context, req *PermissionProto) (*NullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcUpdatePermissionByID not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RpcAddMenu(ctx context.Context, req *MenuProto) (*NullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcAddMenu not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RpcUpdateMenuByID(ctx context.Context, req *MenuProto) (*NullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcUpdateMenuByID not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RpcDeletePermissionByID(ctx context.Context, req *Index) (*NullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcDeletePermissionByID not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RpcGetMenuCascadeByModule(ctx context.Context, req *MenuModule) (*Cascades, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcGetMenuCascadeByModule not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RpcAddUsers(ctx context.Context, req *AddUsersRequest) (*NullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcAddUsers not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RpcGetGroups(ctx context.Context, req *GroupID) (*Groups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcGetGroups not implemented")
}

func RegisterRpcOrgServiceServer(s *grpc.Server, srv RpcOrgServiceServer) {
	s.RegisterService(&_RpcOrgService_serviceDesc, srv)
}

func _RpcOrgService_RpcAddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RpcAddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RpcAddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RpcAddUser(ctx, req.(*UserProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RpcUpdateUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RpcUpdateUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RpcUpdateUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RpcUpdateUserByID(ctx, req.(*UserProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RpcGetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Index)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RpcGetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RpcGetUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RpcGetUserById(ctx, req.(*Index))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RpcImportUsersByGroupId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupUserIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RpcImportUsersByGroupId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RpcImportUsersByGroupId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RpcImportUsersByGroupId(ctx, req.(*GroupUserIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RpcDeleteUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Index)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RpcDeleteUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RpcDeleteUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RpcDeleteUserByID(ctx, req.(*Index))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RpcGetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RpcGetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RpcGetUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RpcGetUserList(ctx, req.(*UserPage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RpcGetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserQueryCondition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RpcGetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RpcGetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RpcGetUsers(ctx, req.(*UserQueryCondition))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RpcBatchDeleteUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RpcBatchDeleteUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RpcBatchDeleteUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RpcBatchDeleteUsers(ctx, req.(*UserIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RPCGroupAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RPCGroupAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RPCGroupAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RPCGroupAdd(ctx, req.(*GroupAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RPCGroupQueryWithQuotaByCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupQueryWithQuotaByConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RPCGroupQueryWithQuotaByCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RPCGroupQueryWithQuotaByCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RPCGroupQueryWithQuotaByCondition(ctx, req.(*GroupQueryWithQuotaByConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RPCGroupUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RPCGroupUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RPCGroupUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RPCGroupUpdate(ctx, req.(*GroupUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RPCGroupTreeQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RPCGroupTreeQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RPCGroupTreeQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RPCGroupTreeQuery(ctx, req.(*GroupID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RPCGroupDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RPCGroupDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RPCGroupDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RPCGroupDelete(ctx, req.(*GroupID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RPCQueryGroupAndSubGroupsUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RPCQueryGroupAndSubGroupsUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RPCQueryGroupAndSubGroupsUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RPCQueryGroupAndSubGroupsUsers(ctx, req.(*GroupID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RPCQueryGroupIDAndSubGroupsID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RPCQueryGroupIDAndSubGroupsID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RPCQueryGroupIDAndSubGroupsID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RPCQueryGroupIDAndSubGroupsID(ctx, req.(*GroupID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RPCSetGroupQuotaUsed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupQuotaUsedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RPCSetGroupQuotaUsed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RPCSetGroupQuotaUsed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RPCSetGroupQuotaUsed(ctx, req.(*SetGroupQuotaUsedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RPCQueryQuotaByCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQuotaByCondition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RPCQueryQuotaByCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RPCQueryQuotaByCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RPCQueryQuotaByCondition(ctx, req.(*QueryQuotaByCondition))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RPCQuerySubGroupsUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RPCQuerySubGroupsUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RPCQuerySubGroupsUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RPCQuerySubGroupsUsers(ctx, req.(*GroupID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RpcAddRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMenuPermRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RpcAddRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RpcAddRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RpcAddRole(ctx, req.(*CreateMenuPermRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RpcUpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMenuPermRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RpcUpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RpcUpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RpcUpdateRole(ctx, req.(*CreateMenuPermRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RpcDeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Index)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RpcDeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RpcDeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RpcDeleteRole(ctx, req.(*Index))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RpcQueryRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Index)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RpcQueryRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RpcQueryRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RpcQueryRole(ctx, req.(*Index))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RpcQueryRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePageRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RpcQueryRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RpcQueryRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RpcQueryRoles(ctx, req.(*RolePageRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RpcMenuTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuModule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RpcMenuTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RpcMenuTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RpcMenuTree(ctx, req.(*MenuModule))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RPCQuotaUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuotaUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RPCQuotaUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RPCQuotaUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RPCQuotaUpdate(ctx, req.(*QuotaUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RpcAddPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RpcAddPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RpcAddPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RpcAddPermission(ctx, req.(*PermissionProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RpcGetPermissionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Index)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RpcGetPermissionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RpcGetPermissionByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RpcGetPermissionByID(ctx, req.(*Index))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RpcUpdatePermissionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RpcUpdatePermissionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RpcUpdatePermissionByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RpcUpdatePermissionByID(ctx, req.(*PermissionProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RpcAddMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RpcAddMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RpcAddMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RpcAddMenu(ctx, req.(*MenuProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RpcUpdateMenuByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RpcUpdateMenuByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RpcUpdateMenuByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RpcUpdateMenuByID(ctx, req.(*MenuProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RpcDeletePermissionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Index)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RpcDeletePermissionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RpcDeletePermissionByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RpcDeletePermissionByID(ctx, req.(*Index))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RpcGetMenuCascadeByModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuModule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RpcGetMenuCascadeByModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RpcGetMenuCascadeByModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RpcGetMenuCascadeByModule(ctx, req.(*MenuModule))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RpcAddUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RpcAddUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RpcAddUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RpcAddUsers(ctx, req.(*AddUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RpcGetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RpcGetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RpcGetGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RpcGetGroups(ctx, req.(*GroupID))
	}
	return interceptor(ctx, in, info, handler)
}

var _RpcOrgService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb_user_v1.RpcOrgService",
	HandlerType: (*RpcOrgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RpcAddUser",
			Handler:    _RpcOrgService_RpcAddUser_Handler,
		},
		{
			MethodName: "RpcUpdateUserByID",
			Handler:    _RpcOrgService_RpcUpdateUserByID_Handler,
		},
		{
			MethodName: "RpcGetUserById",
			Handler:    _RpcOrgService_RpcGetUserById_Handler,
		},
		{
			MethodName: "RpcImportUsersByGroupId",
			Handler:    _RpcOrgService_RpcImportUsersByGroupId_Handler,
		},
		{
			MethodName: "RpcDeleteUserByID",
			Handler:    _RpcOrgService_RpcDeleteUserByID_Handler,
		},
		{
			MethodName: "RpcGetUserList",
			Handler:    _RpcOrgService_RpcGetUserList_Handler,
		},
		{
			MethodName: "RpcGetUsers",
			Handler:    _RpcOrgService_RpcGetUsers_Handler,
		},
		{
			MethodName: "RpcBatchDeleteUsers",
			Handler:    _RpcOrgService_RpcBatchDeleteUsers_Handler,
		},
		{
			MethodName: "RPCGroupAdd",
			Handler:    _RpcOrgService_RPCGroupAdd_Handler,
		},
		{
			MethodName: "RPCGroupQueryWithQuotaByCondition",
			Handler:    _RpcOrgService_RPCGroupQueryWithQuotaByCondition_Handler,
		},
		{
			MethodName: "RPCGroupUpdate",
			Handler:    _RpcOrgService_RPCGroupUpdate_Handler,
		},
		{
			MethodName: "RPCGroupTreeQuery",
			Handler:    _RpcOrgService_RPCGroupTreeQuery_Handler,
		},
		{
			MethodName: "RPCGroupDelete",
			Handler:    _RpcOrgService_RPCGroupDelete_Handler,
		},
		{
			MethodName: "RPCQueryGroupAndSubGroupsUsers",
			Handler:    _RpcOrgService_RPCQueryGroupAndSubGroupsUsers_Handler,
		},
		{
			MethodName: "RPCQueryGroupIDAndSubGroupsID",
			Handler:    _RpcOrgService_RPCQueryGroupIDAndSubGroupsID_Handler,
		},
		{
			MethodName: "RPCSetGroupQuotaUsed",
			Handler:    _RpcOrgService_RPCSetGroupQuotaUsed_Handler,
		},
		{
			MethodName: "RPCQueryQuotaByCondition",
			Handler:    _RpcOrgService_RPCQueryQuotaByCondition_Handler,
		},
		{
			MethodName: "RPCQuerySubGroupsUsers",
			Handler:    _RpcOrgService_RPCQuerySubGroupsUsers_Handler,
		},
		{
			MethodName: "RpcAddRole",
			Handler:    _RpcOrgService_RpcAddRole_Handler,
		},
		{
			MethodName: "RpcUpdateRole",
			Handler:    _RpcOrgService_RpcUpdateRole_Handler,
		},
		{
			MethodName: "RpcDeleteRole",
			Handler:    _RpcOrgService_RpcDeleteRole_Handler,
		},
		{
			MethodName: "RpcQueryRole",
			Handler:    _RpcOrgService_RpcQueryRole_Handler,
		},
		{
			MethodName: "RpcQueryRoles",
			Handler:    _RpcOrgService_RpcQueryRoles_Handler,
		},
		{
			MethodName: "RpcMenuTree",
			Handler:    _RpcOrgService_RpcMenuTree_Handler,
		},
		{
			MethodName: "RPCQuotaUpdate",
			Handler:    _RpcOrgService_RPCQuotaUpdate_Handler,
		},
		{
			MethodName: "RpcAddPermission",
			Handler:    _RpcOrgService_RpcAddPermission_Handler,
		},
		{
			MethodName: "RpcGetPermissionByID",
			Handler:    _RpcOrgService_RpcGetPermissionByID_Handler,
		},
		{
			MethodName: "RpcUpdatePermissionByID",
			Handler:    _RpcOrgService_RpcUpdatePermissionByID_Handler,
		},
		{
			MethodName: "RpcAddMenu",
			Handler:    _RpcOrgService_RpcAddMenu_Handler,
		},
		{
			MethodName: "RpcUpdateMenuByID",
			Handler:    _RpcOrgService_RpcUpdateMenuByID_Handler,
		},
		{
			MethodName: "RpcDeletePermissionByID",
			Handler:    _RpcOrgService_RpcDeletePermissionByID_Handler,
		},
		{
			MethodName: "RpcGetMenuCascadeByModule",
			Handler:    _RpcOrgService_RpcGetMenuCascadeByModule_Handler,
		},
		{
			MethodName: "RpcAddUsers",
			Handler:    _RpcOrgService_RpcAddUsers_Handler,
		},
		{
			MethodName: "RpcGetGroups",
			Handler:    _RpcOrgService_RpcGetGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "org-svc.proto",
}
