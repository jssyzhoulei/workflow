// Code generated by protoc-gen-go. DO NOT EDIT.
// source: org-svc.proto

package pb_user_v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("org-svc.proto", fileDescriptor_79fd6655a38769cc) }

var fileDescriptor_79fd6655a38769cc = []byte{
	// 130 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x2f, 0x4a, 0xd7,
	0x2d, 0x2e, 0x4b, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2a, 0x48, 0x8a, 0x2f, 0x2d,
	0x4e, 0x2d, 0x8a, 0x2f, 0x33, 0x94, 0xe2, 0x03, 0x31, 0x74, 0x73, 0x8b, 0xd3, 0x21, 0x72, 0x46,
	0xdd, 0x8c, 0x5c, 0xbc, 0x41, 0x05, 0xc9, 0xfe, 0x45, 0xe9, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9,
	0xa9, 0x42, 0x56, 0x5c, 0x5c, 0x41, 0x05, 0xc9, 0x8e, 0x29, 0x29, 0xa1, 0xc5, 0xa9, 0x45, 0x42,
	0xa2, 0x7a, 0x08, 0xcd, 0x7a, 0x20, 0x91, 0x00, 0x90, 0x36, 0x29, 0xec, 0xc2, 0x42, 0x76, 0x5c,
	0x7c, 0x41, 0x05, 0xc9, 0xee, 0xa9, 0x25, 0x20, 0x21, 0xa7, 0x4a, 0xcf, 0x14, 0xd2, 0xf4, 0x27,
	0xb1, 0x81, 0x1d, 0x65, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x88, 0x5a, 0xd7, 0x9e, 0xc1, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RpcOrgServiceClient is the client API for RpcOrgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RpcOrgServiceClient interface {
	RpcAddUser(ctx context.Context, in *UserProto, opts ...grpc.CallOption) (*UserProto, error)
	RpcGetUserById(ctx context.Context, in *UserProto, opts ...grpc.CallOption) (*UserProto, error)
}

type rpcOrgServiceClient struct {
	cc *grpc.ClientConn
}

func NewRpcOrgServiceClient(cc *grpc.ClientConn) RpcOrgServiceClient {
	return &rpcOrgServiceClient{cc}
}

func (c *rpcOrgServiceClient) RpcAddUser(ctx context.Context, in *UserProto, opts ...grpc.CallOption) (*UserProto, error) {
	out := new(UserProto)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RpcAddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RpcGetUserById(ctx context.Context, in *UserProto, opts ...grpc.CallOption) (*UserProto, error) {
	out := new(UserProto)
	err := c.cc.Invoke(ctx, "/pb_user_v1.RpcOrgService/RpcGetUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcOrgServiceServer is the server API for RpcOrgService service.
type RpcOrgServiceServer interface {
	RpcAddUser(context.Context, *UserProto) (*UserProto, error)
	RpcGetUserById(context.Context, *UserProto) (*UserProto, error)
}

// UnimplementedRpcOrgServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRpcOrgServiceServer struct {
}

func (*UnimplementedRpcOrgServiceServer) RpcAddUser(ctx context.Context, req *UserProto) (*UserProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcAddUser not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RpcGetUserById(ctx context.Context, req *UserProto) (*UserProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcGetUserById not implemented")
}

func RegisterRpcOrgServiceServer(s *grpc.Server, srv RpcOrgServiceServer) {
	s.RegisterService(&_RpcOrgService_serviceDesc, srv)
}

func _RpcOrgService_RpcAddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RpcAddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RpcAddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RpcAddUser(ctx, req.(*UserProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RpcGetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RpcGetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_user_v1.RpcOrgService/RpcGetUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RpcGetUserById(ctx, req.(*UserProto))
	}
	return interceptor(ctx, in, info, handler)
}

var _RpcOrgService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb_user_v1.RpcOrgService",
	HandlerType: (*RpcOrgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RpcAddUser",
			Handler:    _RpcOrgService_RpcAddUser_Handler,
		},
		{
			MethodName: "RpcGetUserById",
			Handler:    _RpcOrgService_RpcGetUserById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "org-svc.proto",
}
