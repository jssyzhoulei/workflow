//protoc --go_out=plugins=grpc:.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.13.0
// source: org-svc.proto

package pb_user_v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_org_svc_proto protoreflect.FileDescriptor

var file_org_svc_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x2d, 0x73, 0x76, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0e, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32,
	0x90, 0x01, 0x0a, 0x0d, 0x52, 0x70, 0x63, 0x4f, 0x72, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x24, 0x0a, 0x0a, 0x52, 0x70, 0x63, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x0a, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x28, 0x0a, 0x0e, 0x52, 0x70, 0x63, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0a, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x2f, 0x0a, 0x0b, 0x52, 0x50, 0x43, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64,
	0x12, 0x10, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x3b, 0x70, 0x62, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_org_svc_proto_goTypes = []interface{}{
	(*UserProto)(nil),       // 0: UserProto
	(*GroupAddRequest)(nil), // 1: GroupAddRequest
	(*GroupResponse)(nil),   // 2: GroupResponse
}
var file_org_svc_proto_depIdxs = []int32{
	0, // 0: RpcOrgService.RpcAddUser:input_type -> UserProto
	0, // 1: RpcOrgService.RpcGetUserById:input_type -> UserProto
	1, // 2: RpcOrgService.RPCGroupAdd:input_type -> GroupAddRequest
	0, // 3: RpcOrgService.RpcAddUser:output_type -> UserProto
	0, // 4: RpcOrgService.RpcGetUserById:output_type -> UserProto
	2, // 5: RpcOrgService.RPCGroupAdd:output_type -> GroupResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_org_svc_proto_init() }
func file_org_svc_proto_init() {
	if File_org_svc_proto != nil {
		return
	}
	file_user_msg_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_org_svc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_org_svc_proto_goTypes,
		DependencyIndexes: file_org_svc_proto_depIdxs,
	}.Build()
	File_org_svc_proto = out.File
	file_org_svc_proto_rawDesc = nil
	file_org_svc_proto_goTypes = nil
	file_org_svc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RpcOrgServiceClient is the client API for RpcOrgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RpcOrgServiceClient interface {
	RpcAddUser(ctx context.Context, in *UserProto, opts ...grpc.CallOption) (*UserProto, error)
	RpcGetUserById(ctx context.Context, in *UserProto, opts ...grpc.CallOption) (*UserProto, error)
	RPCGroupAdd(ctx context.Context, in *GroupAddRequest, opts ...grpc.CallOption) (*GroupResponse, error)
}

type rpcOrgServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcOrgServiceClient(cc grpc.ClientConnInterface) RpcOrgServiceClient {
	return &rpcOrgServiceClient{cc}
}

func (c *rpcOrgServiceClient) RpcAddUser(ctx context.Context, in *UserProto, opts ...grpc.CallOption) (*UserProto, error) {
	out := new(UserProto)
	err := c.cc.Invoke(ctx, "/RpcOrgService/RpcAddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RpcGetUserById(ctx context.Context, in *UserProto, opts ...grpc.CallOption) (*UserProto, error) {
	out := new(UserProto)
	err := c.cc.Invoke(ctx, "/RpcOrgService/RpcGetUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcOrgServiceClient) RPCGroupAdd(ctx context.Context, in *GroupAddRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	out := new(GroupResponse)
	err := c.cc.Invoke(ctx, "/RpcOrgService/RPCGroupAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcOrgServiceServer is the server API for RpcOrgService service.
type RpcOrgServiceServer interface {
	RpcAddUser(context.Context, *UserProto) (*UserProto, error)
	RpcGetUserById(context.Context, *UserProto) (*UserProto, error)
	RPCGroupAdd(context.Context, *GroupAddRequest) (*GroupResponse, error)
}

// UnimplementedRpcOrgServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRpcOrgServiceServer struct {
}

func (*UnimplementedRpcOrgServiceServer) RpcAddUser(context.Context, *UserProto) (*UserProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcAddUser not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RpcGetUserById(context.Context, *UserProto) (*UserProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcGetUserById not implemented")
}
func (*UnimplementedRpcOrgServiceServer) RPCGroupAdd(context.Context, *GroupAddRequest) (*GroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCGroupAdd not implemented")
}

func RegisterRpcOrgServiceServer(s *grpc.Server, srv RpcOrgServiceServer) {
	s.RegisterService(&_RpcOrgService_serviceDesc, srv)
}

func _RpcOrgService_RpcAddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RpcAddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RpcOrgService/RpcAddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RpcAddUser(ctx, req.(*UserProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RpcGetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RpcGetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RpcOrgService/RpcGetUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RpcGetUserById(ctx, req.(*UserProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcOrgService_RPCGroupAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcOrgServiceServer).RPCGroupAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RpcOrgService/RPCGroupAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcOrgServiceServer).RPCGroupAdd(ctx, req.(*GroupAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RpcOrgService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RpcOrgService",
	HandlerType: (*RpcOrgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RpcAddUser",
			Handler:    _RpcOrgService_RpcAddUser_Handler,
		},
		{
			MethodName: "RpcGetUserById",
			Handler:    _RpcOrgService_RpcGetUserById_Handler,
		},
		{
			MethodName: "RPCGroupAdd",
			Handler:    _RpcOrgService_RPCGroupAdd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "org-svc.proto",
}
